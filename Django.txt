pip install django #장고 설치

django-admin startproject 프로젝트이름 #프로젝트 생성

python manage.py makemigrations #DB 생성
python manage.py migrate #DB모델 변경사항 적용
python manage.py runserver #서버 실행  (default : http://127.0.0.1:8000)
python manage.py startapp 앱이름 #앱 생성(설치)
python manage.py createsuperuser #admin 생성
python manage.py shell #쉘 사용

settings.py : Django 프로젝트 상의 모든 환경 설정을 관리하는 파일, 프로젝트에서 가장 큰 비중을 차지하는 파일
- DEBUG : 개발중일땐 true로 설정하여 세부 내역 확인, 배포중일땐 false로 설정하여 서버 오류 발생이라는 메세지만 뜨게 함
- installed_apps : Django 앱을 생성할 경우, 이 부분에 추가를 해야만 Django 프로젝트 내에서 사용 가능
- templates : Django 프로젝트 및 앱의 웹페이지 양식을 저장하기 위한 Template. 프로젝트에 대한 웹페이지는 '/프로젝트명/templates/' 디렉토리 내에 있는 파일, 앱은 '/앱명/templates/' 디렉토리 내에 있는 파일의 URL만 사용한다.
- databases : Django에서 사용할 DB를 지정하는 구문. 기본은 SQLite3인데 변경 가능.
- time_zone : 기본값은 표준시(UTC), 한국 표준시로 하려면 'Asia/Seoul'로 변경
urls.py : HTTP Web 요청에 대한 컨트롤, URL을 관리하는 파일
^ : 첫 글자와 매칭 (^a : a O abc O def X)
$ : 마지막 글자와 매칭 (b$ : b O  abbb O abc X)
^$ : 빈 문자열(index로 갈때 사용)
'' : 빈 문자열(모든 url에 적용된다)

wsgi.py : 웹 서비스를 위한 호환 규격을 명시한 파일, 작업에 사용하지는 않지만 웹 어플리케이션 가동을 위해선 필수적인 파일
admin.py : 관리자 페이지에 들어갈 데이터 명세, 웹 어플리케이션 상에서 관리되는 데이터 등록, 조회, 삭제를 수행하기 위한 페이지
apps.py : 앱에 대한 클래스를 선언 및 정의하는 파일.
models.py : configure database, 클래스를 생성한다고 생각하면 쉽다
ex) 게시글을 생성한다고 하면 title, text, author, date 등이 필요하다
__str__ 메소드를 이용하여 데이터베이스에서 어떤 속성을 표시할 지 설정할 수 있다. (return self.name)을 하면 이름이 게시글 제목처럼 나옴

category = models.ForeignKey('BoardCategories', models.DO_NOTHING) #BoardCategories 모델의 foreign key로 사용되는 필드
models.CharField : 글자 수가 제한된 텍스트를 정의할 때 사용, 글 제목 등
models.TextField : 글자 수에 제한이 없는 긴 텍스트를 위한 속성
models.DateTimeField : 날짜와 시간을 의미
models.ForeignKey : 다른 모델에 대한 링크
class Meta:
    managed = False  #true는 모델 내용 변경 가능, false는 불가능
    db_table = 'boards' 
더 많은 모델은 : https://docs.djangoproject.com/en/2.0/ref/models/fields/#field-types
필드의 속성 : blank, null = 공백 허용 여부, 미존재 값 여부

views.py : deliver a service, models과 templates를 연결해주는 역할, 사용자의 요청에 대한 정보를 찾아서 원하는 정보를 다시 리턴
HttpResponse : 웹 요청의 결과를 http 형식으로 리턴하기 위한 모듈


장고 강의 내용
Django의 개발 방식은 MTV(Model-Template_View) 프레임워크를 사용한다.
Model : DB 상에 저장되어 있는 데이터
Template : View에서 나타내고자 하는 웹페이지에 대한 화면의 틀을 제공하는 것으로 HTML 파일로 구성되어 있다.
View : 웹페이지를 구성하는 단위로 웹페이지 출력을 위한 기능 및 어떤 HTML 파일을 호출하는지에 대한 부분을 나타낸다.

ex)로그인을 예로 들어서..
Model : 사용자 정보가 올바른 지에 대한 ID, Password를 보관하고 있는 DB 상 데이터
Template : 로그인을 위해서 ID, Password를 입력하고 입력 결과를 전송하기 위한 화면 양식
View : 로그인 기능 수행을 위한 웹페이지를 지정하는 기능, 로그인 정보를 서버로 전송할 때 사용자 정보 DB 데이터를 가져온 후 ID 및 Password가 유효한 지를 검증하고 확인된 결과를 다시 반환하는 기능 수행

MySQL - Django 연동
settings.py에서 
'ENGINE' : 'django.db.backends.mysql',
'NAME' : 'DB명',
'USER' : '아이디',
'PASSWORD' : '비밀번호',
'PORT' : '포트번호',
'HOST' : DB 접속을 위한 주소를 입력,
'OPTIONS' : { 'init_command' : "SET sql_mode='STRICT_TRANS_TABLES'",} #입력 오류 방지 옵션

에러가 나면 sudo apt-get install default-libmysqlclient-dev
pip install mysqlclient
python manage.py migrate


